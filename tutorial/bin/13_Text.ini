; orx - Tutorial config file
; Should be used with orx v.1.9+

[Label]
Graphic  = @
Text     = @
String   = @
Scale    = 3
Pivot    = left
Position = (-580, 400, 0)

[Scene]
Position = (0, 0, 0)
CurrentList = Test
TextList = @TextLists.Test ; Change this from Demo to Test to switch to test objects

[Aliases]
red = color(255,0,0)
green = color(0,255,0)
blue = color(0,0,255)
s1 = scale(1,1,1)
s2 = scale(2,2,2)
s3 = scale(3,3,3)
chinese = font(CustomChineseFont)
penguin = font(CustomFont)
; scale = scale(2,3,4)
warning = red, s2

; Quick and dirty basis for text objects with physical boundaries for testing
[TextObject]
AliasTable = Aliases
PartList   = @
Dynamic    = false
Type       = box
Solid      = true
Body       = @
Graphic    = @
Text       = @
String     = @
Position   = (0,0,0)
Scale      = 3
Pivot      = center

[Controls@TextObject]
String = "[scale(1.25,1.25,1):Controls:]
Right Arrow = Cycle Next
Left Arrow  = Cycle Previous
Up Arrow    = Swap Text List
Down Arrow  = Swap Text List"

;---------------
; DEMO OBJECTS
;---------------

[Demo Controls@Controls]

[Markup Language@TextObject]
Scale  = 1.3
String = "[s2:Markup Language Syntax:]
[scale(1.5,1.5,1):
\[color([red:R],[green:G],[blue:B]):   Apply color in RGB from this point on\]
\[scale(X,Y,Z):   Apply scale in XYZ from this point on (Z is ignored)\]
\[font(FontName): Apply font defined in section 'FontName'\]
\\                Escape character]

Open up 13_Text.ini and start editing!"

[Basic Fonts@TextObject]
Scale = 2
String   = "Default Font
[font(CustomChineseFont):这是Orx的标志] <- Stolen from locale tutorial
[font(CustomFont):Another custom font]"

[Basic Colors@TextObject]
String   = [color(180,0,10):RED [color(10,160,10):GREEN [color(10,100,255):BLUE]]]

[Rainbow@TextObject]
Scale    = 5
String   = "[color(230,72,8):Orx [color(241,190,2):can [color(4,130,7):taste [color(68,19,73):the [color(192,4,63):rainbow
Orx ]can ]also ]un-taste ]it]"

[Basic Scales@TextObject]
String   = "NORMAL TEXT
[scale(2,1,1):WIDE TEXT
[scale(1,2,1):TALL TEXT
]]NORMAL TEXT"

[Caterpillar@TextObject]
Scale    = 8
String   = [scale(.5,.5,1):C[scale(.75,.75,1):A[scale(1,1,1):T[scale(1.25,1.25,1):E[scale(1.5,1.5,1):R[scale(1.75,1.75,1):P]I]L]L]A]R]

[TextLists]
; Demo stuff for people to play with
Demo = Demo Controls #
       Markup Language #
       Basic Fonts #
       Basic Colors #
       Rainbow #
       Basic Scales #
       Caterpillar
; Tests for devs
Test = TestControls #
       TestNoMarkers #
       TestFonts #
       TestWhitespaceWithOverrides #
       TestColorMultiply #
       TestMarkerAtControls #
       TestMarkerAtEnd #
       TestFixedWidth_ExplicitLineBreak #
       TestFixedWidth_NoExplicitLineBreak #
       TestFixedWidthHeightTest0 #
       TestFixedWidthHeightTest1 #
       TestFixedWidthHeightTest2 #
       TestInvalidValues #
       TestInvalidScales

;------------------------
; General Configuration
;------------------------
[Display]
ScreenWidth   = @Camera.FrustumWidth
ScreenHeight  = @Camera.FrustumHeight
Title         = Text Tutorial

[Input]
SetList = MainInput

[MainInput]
KEY_ESCAPE = Quit
KEY_Q = Quit
KEY_F12 = Screenshot
KEY_LEFT = Prev
KEY_RIGHT = Next
KEY_UP = Swap
KEY_DOWN = Swap

[Physics]
ShowDebug	= false

[Resource]
Texture = ../data/object
Config = .
WatchList = Config

[Screenshot]
BaseName = Text-Tutorial-
Extension = png

[Viewport]
Camera            = Camera

[Camera]
FrustumWidth  = 1200
FrustumHeight = 860
FrustumFar    = 1.0
FrustumNear   = 0.0
Position      = (0.0, 0.0, -1.0)

;---------------
; TEST OBJECTS
;---------------

[TestControls@Controls]

[TestColorMultiply@TextObject]
Color    = (255, 100, 0)
String   = "this [color(100, 255, 100):green] word multiplies with red"
; TEST spaces on ends of style name
; TEST spaces on ends of parenthesis
; TEST spaces on ends of arguments
; TEST spaces on ends of commas in style list
; TEST missing colon

[TestFonts@TextObject]
String = "Normal
[font(CustomFont):Penguin Attack!
[font(CustomChineseFont):Orx志是标的这]
Pop]
Pop"

[TestWhitespaceWithOverrides@TextObject]
String = hello[  scale  (  1,  2,  3  )  ,  scale( .5, .5, .5)  : World!]

[TestNoMarkers@TextObject]
String   = "no markers"
[TestMarkerAtControls@TextObject]
String   = "[scale(2,2,2):]at start"
[TestMarkerAtEnd@TextObject]
String   = "at end[scale(2,2,2):]"

[TestInvalidValues@TextObject]
String   = "[font(brokenfont):bad font]
[color(brokencolor):bad color]
[scale(brokenscale):bad scale]"

[TestInvalidScales@TextObject]
String   = "No changes in scale should be seen:
[scale():No components]
[scale(2):Only 1 component]
[scale(2,2):Only 2 components]
[scale(2,2,2,2):More than 3 components]
[scale(2 2, 2 2, 3 3):Multiple numbers per component]
[scale(,,,):Only commas]
[scale(,2,2):Missing [scale(2,,2):separate] [scale(2,2,):components]"

[TestFixedWidth_ExplicitLineBreak@TextObject]
Size = (120, 0, 0)
String = "normal [scale(2,2,1):2x a b c d e f g
[scale(3,3,1):3x] 2x]"

[TestFixedWidth_NoExplicitLineBreak@TextObject]
Size = (120, 0, 0)
String = "normal [scale(2,2,1):2x [scale(3,3,1):3x] 2x and more"

[TestFixedWidthHeightTest0@TextObject]
Size = (100, 79, 0)
String = "normal [scale(2,2,1):2x [scale(3,3,1):3[color(0,255,0):x [color(255,0,0),scale(4,4,1):4x]]]] normal"

[TestFixedWidthHeightTest1@TestFixedWidthHeightTest0]
Size = (100, 80, 0)

[TestFixedWidthHeightTest2@TestFixedWidthHeightTest0]
Size = (100, 81, 0)

[FixedHeightTruncatesExplicitNewlines@TextObject]
Size = (0, 10, 0)
String = "normal [scale(1,2,1):2x
[scale(1,3,1):3x] 2x"

; edge case if multiple newlines appear in a row (what happens with line markers?)

[CustomFont]
Texture = penguinattack.png
CharacterList = " !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
CharacterSize = (19, 24, 0)

[CustomChineseFont]
Texture = customchinesefont.png
CharacterList = "Orx志是标的这"
CharacterSize = (24, 24, 0)
CharacterSpacing = (2, 2, 0)
